p.owner
p = Project.from("https://github.com/bantik/synack")
Owner.count
p = Project.from("https://github.com/bantik/contributor_covenant")
Can you hear me?
proj = Project.last
proj.repo_path
project.new
Project.new(name: "Foo")
Project.new(language: 'Ruby')
Project.new(name:"Joy", description:"First Project")
new_project = Project.new(name:"Joy", description:"First Project")
new_project.errors.full_messages
new_project = Project.new(name:"Joy", description:"First Project", repo_url: "https://github.com/bantik/opensourceforwomen_org"))
new_project = Project.new(name:"Joy", description:"First Project", repo_url: "https://github.com/bantik/opensourceforwomen_org")
new_project.save
url = "https://github.com/Bantik/opensourceforwomen_org"
url
url = "https://github.com/Bantik/opensourceforwomen.org"
Project.last.delete
Project.from(url)
Project.count
Project.list
Project.all
Project.last
project = Project.last
project
project.owner
p.signals
Project.new
p = Project.new
p.signs
sign = Sign.new("Code of Conduct")
sign = Sign.new(name: "Code of Conduct")
sign.save
project = Project.first
project.signs << sign
s = Sign.last
p = Project.last
p.signs << s
p.save
uu = Api::V2::User.from(User.all[-12](
uu = Api::V2::User.from(User.all[-12])
uu.resources
a =uu.authorizations.first
a.resources
a = uu.authorizations.first
Api::V2::Authorization.materialize(user.authorizations)
u = uu.user
Api::V2::Authorization.materialize(u.authorizations)
aa = _
aa.first
a.roles
a.roles.first.resources
r =Role.last
r.permissions.first
uu.authorizations
a = _
a
uu = Api::V2::User.from(User.find(64))
uu.authorizations.first
uu.authorizations.first.to_json
JSON.parse(uu.authorizations.first.to_json)
Rails.root
"#{Rails.root}"
u = User.where(email: "create_all@customer.com").first
PropertyListing.distinct(:property_id)
PropertyListing.pluck(:property_id)
u = User.find(65)
u.properties.where("name LIKE ?", "%estate%")
u.properties.where("name LIKE ?", "%estate%").include(:business_entity)
u.properties.where("name LIKE ?", "%estate%").include(:property_listing)
u.properties.where("name LIKE ?", "%estate%").joins(:property_listing)
u.properties.where("property.property_name LIKE ?", "%estate%").joins(:property_listings)
u.properties.where("property.name LIKE ?", "%estate%").joins(:property_listings)
u.properties.where("property_v.name LIKE ?", "%estate%").joins(:property_listings)
u.properties.where("name LIKE ?", "%estate%").joins(:property_listings)
u.properties.where("properties_v.name LIKE ?", "%estate%").joins(:property_listings)
Property.table_name
property_name = 'estate'
u.properties.by_name(self.property_name).joins(:assignments).includes(:business_entities)
u.properties
u.properties.by_name(property_name).joins(:assignments).includes(:business_entities)
Property.for_user(u).by_name('estate')
Property.for_user(u).by_name('estate').joins(:assignments).includes(:business_entities)
Property.for_user(u).by_name('estate').includes(:business_entities)
u.assignments.includes(:property).where("#{::Property.table_name}.name LIKE ?", "%#{property_name}")
u.assignments.includes(:property).where("#{::Property.table_name}.name LIKE ?", "%#{property_name}").refereces(:properties)
u.assignments.includes(:property).where("#{::Property.table_name}.name LIKE ?", "%#{property_name}").references(:properties)
u
u.admin?
u = User.find(exit
Customer.all
reload!
Customer.converted
Customer
Customer.delete_all
Customer.last
exitexit
exit
